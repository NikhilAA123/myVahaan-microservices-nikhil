// Every Go program must start with a package declaration.
// The `main` package is special; it tells the Go compiler that this is an executable program.
package main

// The `import` block lists all the "cookbooks" (libraries) our program needs.
import (
	"context"
	"database/sql"
	"io"
	"log"
	"net"
	"os"
	"time"

	// This is the official PostgreSQL driver for Go.
	// The underscore `_` means we are importing it for its "side effects"
	// (registering itself with the `database/sql` library), but we won't call its functions directly.
	_ "github.com/lib/pq"
	"google.golang.org/grpc"

	// This imports the code that was auto-generated by the `protoc` compiler.
	// We give it a short alias `pb` (for "protobuf") to make it easy to use.
	pb "myvahaan/vehicle-service/proto"
)

// This is a "struct", which is like a blueprint for an object in Go.
// Our `server` struct will hold a connection to our database.
type server struct {
	pb.UnimplementedVehicleServiceServer // This is required by gRPC for forward compatibility.
	db                                   *sql.DB
}

// This is the implementation of our `UpdateLocation` RPC from the .proto file.
// It's a method attached to our `server` struct.
func (s *server) UpdateLocation(stream pb.VehicleService_UpdateLocationServer) error {
	log.Println("✅ Vehicle-service: Client connected for location updates.")

	// This is an infinite loop to continuously receive messages from the client stream.
	for {
		// `stream.Recv()` waits for the next message from the driver's app.
		update, err := stream.Recv()

		// If the stream is closed by the client, `io.EOF` (End of File) is sent.
		if err == io.EOF {
			log.Println("✅ Vehicle-service: Client closed the stream.")
			// We send a final response and close the connection from our end.
			return stream.SendAndClose(&pb.UpdateResponse{Status: "OK"})
		}
		if err != nil {
			log.Printf("❌ Vehicle-service: Error receiving stream: %v", err)
			return err
		}

		// If we receive a message, we log it.
		log.Printf("Received update for driver %s: H3 Index %s", update.DriverId, update.H3Index)

		// --- THIS IS THE DATABASE LOGIC ---
		// We execute a SQL UPDATE command to save the new location.
		// We use context for cancellation and timeouts, a good practice.
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		_, err = s.db.ExecContext(ctx, "UPDATE users SET current_h3_index = $1, location_updated_at = $2 WHERE id = $3",
			update.H3Index, time.Now(), update.DriverId)

		if err != nil {
			log.Printf("❌ Vehicle-service: Failed to update driver location in DB: %v", err)
			// We could send an error back to the client here, but for streaming,
			// it's often better to just log it and continue receiving updates.
		}
	}
}

// The `main` function is the entry point of our application.
func main() {
	// --- DATABASE CONNECTION ---
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		log.Fatalf("❌ DATABASE_URL environment variable is not set")
	}

	// sql.Open doesn't create a connection immediately, but prepares it.
	db, err := sql.Open("postgres", dbURL)
	if err != nil {
		log.Fatalf("❌ Failed to prepare database connection: %v", err)
	}
	// `defer` is a special Go keyword. It schedules this function call to be run
	// right before the `main` function exits, ensuring our database connection is always closed cleanly.
	defer db.Close()

	// Verify the connection is alive.
	err = db.Ping()
	if err != nil {
		log.Fatalf("❌ Failed to connect to database: %v", err)
	}

	log.Println("✅ Vehicle-service: Successfully connected to PostgreSQL.")

	// --- gRPC SERVER SETUP ---
	// We'll use a new port for this service to avoid conflicts.
	lis, err := net.Listen("tcp", ":50053")
	if err != nil {
		log.Fatalf("❌ Failed to listen: %v", err)
	}

	s := grpc.NewServer()
	// We register our server implementation, passing it our database connection pool.
	pb.RegisterVehicleServiceServer(s, &server{db: db})

	log.Println("✅ Vehicle service gRPC listening on port 50053")
	if err := s.Serve(lis); err != nil {
		log.Fatalf("❌ Failed to serve: %v", err)
	}
}